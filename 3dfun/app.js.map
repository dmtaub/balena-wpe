{"version":3,"sources":["app/clib.coffee","app/initialize.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["# needs to be global for terrain to work\nrequire('three.terrain.js')\n\nlinearDamping = 0.5\nangularDamping = 0.8\njumpVelocity = 22\nlinearFactor = 0.6\nrotationalFactor = 20\nmaxVector = new THREE.Vector3(20, 5000, 20)\nminVector = maxVector.clone().multiplyScalar(-1)\n\nbrown = 0x875f2d\n\nrandomIntBetween = (a, b) ->\n  range = (b - a) + 1\n  b - Math.round(Math.random() * range - 0.5)\n\nclass Tree\n  weight: 9\n  barkColor: brown\n  fallOver: (speedOfBall) ->\n    console.log(\"OUCH!\")\n  constructor: ->\n    @weight = randomIntBetween(6, 10)\n\nclass PineTree extends Tree\n  weight: 20\n\n\nnewTree = new Tree()\n\nclass App\n  constructor: ->\n    console.log \"hello coffee\"\n    @initScene()\n\n    window.addEventListener( 'resize', (() =>\n        @camera.aspect = window.innerWidth / window.innerHeight\n        @camera.updateProjectionMatrix()\n        @renderer.setSize( window.innerWidth, window.innerHeight );\n      ), false )\n\n  initScene: =>\n    TWEEN.start()\n    @renderer = new (THREE.WebGLRenderer)(antialias: true)\n    @renderer.setSize window.innerWidth, window.innerHeight\n    @renderer.shadowMap.enabled = true\n    #renderer.shadowMap.type = THREE.PCFSoftShadowMap\n    @renderer.shadowMapSoft = true\n    document.getElementById('viewport').appendChild @renderer.domElement\n    # render_stats = new Stats\n    # render_stats.domElement.style.position = 'absolute'\n    # render_stats.domElement.style.top = '0px'\n    # render_stats.domElement.style.zIndex = 100\n    # document.getElementById('viewport').appendChild render_stats.domElement\n    # physics_stats = new Stats\n    # physics_stats.domElement.style.position = 'absolute'\n    # physics_stats.domElement.style.top = '50px'\n    # physics_stats.domElement.style.zIndex = 100\n    # document.getElementById('viewport').appendChild physics_stats.domElement\n    @scene = new (Physijs.Scene)(fixedTimeStep: 1 / 60)\n    @scene.setGravity new (THREE.Vector3)(0, -40, 0)\n    @scene.addEventListener 'update', =>\n      @scene.simulate undefined, 1\n      # physics_stats.update()\n      if @playerCamera\n        x = @player.position.x+20\n        y = @player.position.y+20\n        z = @player.position.z+20\n        @camera.position.set(x,y,z)\n        @camera.lookAt @player.position\n      if @player.position.y < -20\n        @scene.remove @player\n        @player = @createShape()\n        @scene.add @player\n      return\n    x=2.5\n    @camera = new (THREE.PerspectiveCamera)(35, window.innerWidth / window.innerHeight, 1, 1000)\n    @camera.position.set 60*x, 50*x, 60*x\n    @camera.lookAt @scene.position\n    @scene.add @camera\n    @playerCamera = false\n    kd.ESC.up ()=>\n      if @playerCamera\n        @playerCamera = false\n        @camera.position.set 60*x, 50*x, 60*x\n        @camera.lookAt @scene.position\n      else\n        @playerCamera = true\n\n    # Light\n    light = new THREE.DirectionalLight(0xFFFFFF)\n    light.position.set 20, 40, -15\n    light.target.position.copy @scene.position\n    light.castShadow = true\n    light.shadow.camera.left = -60\n    light.shadow.camera.top = -60\n    light.shadow.camera.right = 60\n    light.shadow.camera.bottom = 60\n    light.shadow.camera.near = 20\n    light.shadow.camera.far = 200\n    light.shadow.bias = -.0001\n    light.shadow.mapSize.width = light.shadow.mapSize.height = 2048\n    @scene.add light\n    # Loader\n    # loader = new THREE.TextureLoader\n    # Materials\n    #ground_material = Physijs.createMaterial(new THREE.MeshLambertMaterial(color: 0x2194ce, wireframe:true))\n\n    # OLD WAY:\n    # ground_material = Physijs.createMaterial(new (THREE.MeshLambertMaterial)(map: loader.load('images/grass.png')), .8, .4)\n    # ground_material.map.wrapS = ground_material.map.wrapT = THREE.RepeatWrapping\n    # ground_material.map.repeat.set 2.5, 2.5\n    # Ground\n    # NoiseGen = new SimplexNoise\n    ground = new GenTerrain(@scene, =>\n      requestAnimationFrame @render\n      @scene.simulate()\n      @player = @createShape()\n      @player.setDamping linearDamping, angularDamping\n      # @player2 = @createShape();\n      @scene.addEventListener 'update', @moveWithKeys\n    )\n    # ground_geometry = new THREE.PlaneGeometry(75, 75, 50, 50)\n    # fun!\n    # i = 0\n    # while i < ground_geometry.vertices.length\n    #   vertex = ground_geometry.vertices[i]\n    #   vertex.z = NoiseGen.noise(vertex.x / 10, vertex.y / 10) * 2\n    #   i++\n    # ground_geometry.computeFaceNormals()\n    # ground_geometry.computeVertexNormals()\n    # If your plane is not square as far as face count then the HeightfieldMesh\n    # takes two more arguments at the end: # of x faces and # of y faces that were passed to THREE.PlaneMaterial\n    # ground = new Physijs.HeightfieldMesh(ground_geometry, ground_material, 0, 50, 50)\n    # ground.rotation.x = Math.PI / -2\n    # ground.receiveShadow = true\n    # @scene.add ground\n\n    return\n\n  moveWithKeys: =>\n    # // arrow keys\n    v3 = @player.getLinearVelocity()\n    u3 = @player.getAngularVelocity()\n    contactGround = @player._physijs.touches.length > 0\n    if kd.RIGHT.isDown()\n      v3.x += linearFactor\n      v3.z -= linearFactor\n      if contactGround\n        u3.x -= rotationalFactor\n        u3.z -= rotationalFactor\n      else\n        # lose rotation inertia in air\n        u3.x = 0\n        u3.z = 0\n    if kd.LEFT.isDown()\n      v3.x -= linearFactor\n      v3.z += linearFactor\n      if contactGround\n        u3.x += rotationalFactor\n        u3.z += rotationalFactor\n      else\n        # lose rotation inertia in air\n        u3.x = 0\n        u3.z = 0\n    if kd.UP.isDown()\n      v3.x -= linearFactor\n      v3.z -= linearFactor\n      if contactGround\n        u3.x -= rotationalFactor\n        u3.z += rotationalFactor\n      else\n        # lose rotation inertia in air\n        u3.x = 0\n        u3.z = 0\n    if kd.DOWN.isDown()\n      v3.x += linearFactor\n      v3.z += linearFactor\n      if contactGround\n        u3.x += rotationalFactor\n        u3.z -= rotationalFactor\n      else\n        # lose rotation inertia in air\n        u3.x = 0\n        u3.z = 0\n    if kd.SPACE.isDown() and contactGround\n      v3.y = jumpVelocity\n\n    u3.clamp minVector, maxVector\n    v3.clamp minVector, maxVector\n    @player.setAngularVelocity u3\n    @player.setLinearVelocity v3\n    return\n\n  render: =>\n    requestAnimationFrame @render\n    @renderer.render @scene, @camera\n    # render_stats.update()\n    return\n\n  createShape: =>\n    sphere_geometry = new (THREE.SphereGeometry)(1.5, 32, 32)\n    doCreateShape = undefined\n\n    doCreateShape = =>\n      shape = undefined\n      material = new THREE.MeshLambertMaterial(\n        opacity: 0\n        transparent: true\n      )\n      shape = new Physijs.SphereMesh(sphere_geometry, material, undefined, restitution: Math.random() * 1.5)\n      shape.material.color.setRGB Math.random() * 100 / 100, Math.random() * 100 / 100, Math.random() * 100 / 100\n      shape.castShadow = true\n      #shape.receiveShadow = true\n      shape.position.set Math.random() * 30 - 15, 20, Math.random() * 30 - 15\n      shape.rotation.set Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI\n      @scene.add shape\n      new TWEEN.Tween(shape.material).to({ opacity: 1 }, 1500).start()\n      shape\n\n    doCreateShape()\n\n  class GenTerrain\n    # Generate a terrain\n    @TextureLoader: new THREE.TextureLoader()\n    xS: 63\n    yS: 63\n    xSize: 128\n    ySize: 128\n    maxHeight: 30\n    minHeight: 20\n    constructor: (scene, @afterLoad) ->\n      #@addDefault(scene)\n      #@addSky(scene)\n      @addEarth(scene, @afterLoad)\n\n    addDefault: (scene) =>\n      @material = new THREE.MeshBasicMaterial(color: 0x5566aa)\n      @regenerate(scene)\n\n    scatterMeshes: =>\n      # Get the geometry of the terrain across which you want to scatter meshes\n      geo = @terrainScene.children[0].geometry\n      # Add randomly distributed foliage\n      decoScene = THREE.Terrain.ScatterMeshes(geo,\n        mesh: new THREE.Mesh(new THREE.CylinderGeometry(2, 2, 12, 6))\n        w: @xS\n        h: @yS\n        spread: 0.02\n        randomness: Math.random)\n      @terrainScene.add decoScene\n\n    addSky: (scene) =>\n      GenTerrain.TextureLoader.load('img/sky1.jpg', (t1) ->\n        t1.minFilter = THREE.LinearFilter\n        # Texture is not a power-of-two size; use smoother interpolation.\n        skyDome = new THREE.Mesh(new THREE.SphereGeometry(8192/12, 16, 16, 0, Math.PI * 2, 0, Math.PI * 0.5), new (THREE.MeshBasicMaterial)(\n          map: t1\n          side: THREE.BackSide\n          fog: false)\n        )\n        skyDome.position.y = 0#-99\n        skyDome.rotation.x = Math.PI\n        scene.add skyDome\n      )\n    regenerate: (scene) =>\n      @terrainScene = THREE.Terrain(\n        easing: THREE.Terrain.Linear\n        frequency: 2.5\n        heightmap: THREE.Terrain.DiamondSquare\n        material: @material or new THREE.MeshLambertMaterial(color: 0x2194ce)\n        maxHeight: @maxHeight\n        minHeight: -@minHeight\n        steps: 10\n        useBufferGeometry: false\n        xSegments: @xS\n        xSize: @xSize\n        ySegments: @yS\n        ySize: @ySize\n        #turbulent: true\n      )\n      scene.remove(@terrainScene) if @terrainScene\n      scene.remove(ground) if ground\n\n      ground_material = Physijs.createMaterial(new THREE.MeshBasicMaterial(\n        color: 0xffffff\n        transparent: true\n        opacity: 0.02\n        wireframe: true\n      ))\n\n      ground_geometry = @terrainScene.children[0].geometry\n      console.log(ground_geometry)\n      ground_geometry.computeFaceNormals()\n      ground_geometry.computeVertexNormals()\n      ground = new Physijs.HeightfieldMesh(\n        ground_geometry\n        ground_material\n        0\n        @xS\n        @yS\n      )\n      ground.rotation.x = Math.PI / -2\n      # doesn't work w/ basicMaterial\n      @terrainScene.children[0].receiveShadow = true\n\n      scene.add(ground)\n      scene.add @terrainScene\n\n\n    addEarth: (scene, cb) =>\n      loader = GenTerrain.TextureLoader\n      loader.load 'img/sand1.jpg', (t1) =>\n        # TODO: use this layer to determine when ball goes off the terrain\n        # t1.wrapS = t1.wrapT = THREE.RepeatWrapping\n        # sand = new THREE.Mesh(\n        #   new THREE.PlaneBufferGeometry(@xSize, @ySize, 64, 64)\n        #   new THREE.MeshLambertMaterial(map: t1)\n        # )\n        # sand.position.y = -@minHeight-0.01 # prevent zfighting\n        # sand.rotation.x = -0.5 * Math.PI\n        # scene.add sand\n        loader.load 'img/grass1.jpg', (t2) =>\n          loader.load 'img/stone1.jpg', (t3) =>\n            loader.load 'img/snow1.jpg', (t4) =>\n              # t2.repeat.x = t2.repeat.y = 2;\n              @material = THREE.Terrain.generateBlendedMaterial([\n                { texture: t1 }\n                {\n                  texture: t2\n                  levels: [\n                    -15\n                    -10\n                    -5\n                    0\n                  ]\n                }\n                {\n                  texture: t3\n                  levels: [\n                    -20\n                    0\n                    10\n                    15\n                  ]\n                }\n                {\n                  texture: t4\n                  glsl: '1.0 - smoothstep(5.0 + smoothstep(-256.0, 256.0, vPosition.x) * 10.0, 28.0, vPosition.z)'\n                }\n                {\n                  texture: t3\n                  glsl: 'slope > 0.7853981633974483 ? 0.2 : 1.0 - smoothstep(0.47123889803846897, 0.7853981633974483, slope) + 0.2'\n                }\n              ])\n              @regenerate(scene)\n              cb() if cb\n\nmodule.exports = App\n","App = require('clib');\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  // do your setup here\n  console.log('Initialized brunch app');\n  new App();\n});\n"]}