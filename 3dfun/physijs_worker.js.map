{"version":3,"sources":["vendor/physijs_worker.js"],"names":[],"mappingsfile":"public/physijs_worker.js","sourcesContent":["'use strict';\nvar\n\ttransferableMessage = self.webkitPostMessage || self.postMessage,\n\n\t// enum\n\tMESSAGE_TYPES = {\n\t\tWORLDREPORT: 0,\n\t\tCOLLISIONREPORT: 1,\n\t\tVEHICLEREPORT: 2,\n\t\tCONSTRAINTREPORT: 3\n\t},\n\n\t// temp variables\n\t_object,\n\t_vector,\n\t_transform,\n\n\t// functions\n\tpublic_functions = {},\n\tgetShapeFromCache,\n\tsetShapeCache,\n\tcreateShape,\n\treportWorld,\n\treportVehicles,\n\treportCollisions,\n\treportConstraints,\n\n\t// world variables\n\tfixedTimeStep, // used when calling stepSimulation\n\trateLimit, // sets whether or not to sync the simulation rate with fixedTimeStep\n\tlast_simulation_time,\n\tlast_simulation_duration = 0,\n\tworld,\n\ttransform,\n\t_vec3_1,\n\t_vec3_2,\n\t_vec3_3,\n\t_quat,\n\t// private cache\n\t_objects = {},\n\t_vehicles = {},\n\t_constraints = {},\n\t_materials = {},\n\t_objects_ammo = {},\n\t_num_objects = 0,\n\t_num_wheels = 0,\n\t_num_constraints = 0,\n\t_object_shapes = {},\n\n\t// The following objects are to track objects that ammo.js doesn't clean\n\t// up. All are cleaned up when they're corresponding body is destroyed.\n\t// Unfortunately, it's very difficult to get at these objects from the\n\t// body, so we have to track them ourselves.\n\t_motion_states = {},\n\t// Don't need to worry about it for cached shapes.\n    _noncached_shapes = {},\n\t// A body with a compound shape always has a regular shape as well, so we\n\t// have track them separately.\n    _compound_shapes = {},\n\n\t// object reporting\n\tREPORT_CHUNKSIZE, // report array is increased in increments of this chunk size\n\n\tWORLDREPORT_ITEMSIZE = 14, // how many float values each reported item needs\n\tworldreport,\n\n\tCOLLISIONREPORT_ITEMSIZE = 5, // one float for each object id, and a Vec3 contact normal\n\tcollisionreport,\n\n\tVEHICLEREPORT_ITEMSIZE = 9, // vehicle id, wheel index, 3 for position, 4 for rotation\n\tvehiclereport,\n\n\tCONSTRAINTREPORT_ITEMSIZE = 6, // constraint id, offset object, offset, applied impulse\n\tconstraintreport;\n\nvar ab = new ArrayBuffer( 1 );\n\ntransferableMessage( ab, [ab] );\nvar SUPPORT_TRANSFERABLE = ( ab.byteLength === 0 );\n\ngetShapeFromCache = function ( cache_key ) {\n\tif ( _object_shapes[ cache_key ] !== undefined ) {\n\t\treturn _object_shapes[ cache_key ];\n\t}\n\treturn null;\n};\n\nsetShapeCache = function ( cache_key, shape ) {\n\t_object_shapes[ cache_key ] = shape;\n}\n\ncreateShape = function( description ) {\n\tvar cache_key, shape;\n\n\t_transform.setIdentity();\n\tswitch ( description.type ) {\n\t\tcase 'plane':\n\t\t\tcache_key = 'plane_' + description.normal.x + '_' + description.normal.y + '_' + description.normal.z;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\t_vec3_1.setX(description.normal.x);\n\t\t\t\t_vec3_1.setY(description.normal.y);\n\t\t\t\t_vec3_1.setZ(description.normal.z);\n\t\t\t\tshape = new Ammo.btStaticPlaneShape(_vec3_1, 0 );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'box':\n\t\t\tcache_key = 'box_' + description.width + '_' + description.height + '_' + description.depth;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\t_vec3_1.setX(description.width / 2);\n\t\t\t\t_vec3_1.setY(description.height / 2);\n\t\t\t\t_vec3_1.setZ(description.depth / 2);\n\t\t\t\tshape = new Ammo.btBoxShape(_vec3_1);\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'sphere':\n\t\t\tcache_key = 'sphere_' + description.radius;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btSphereShape( description.radius );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'cylinder':\n\t\t\tcache_key = 'cylinder_' + description.width + '_' + description.height + '_' + description.depth;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\t_vec3_1.setX(description.width / 2);\n\t\t\t\t_vec3_1.setY(description.height / 2);\n\t\t\t\t_vec3_1.setZ(description.depth / 2);\n\t\t\t\tshape = new Ammo.btCylinderShape(_vec3_1);\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'capsule':\n\t\t\tcache_key = 'capsule_' + description.radius + '_' + description.height;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\t// In Bullet, capsule height excludes the end spheres\n\t\t\t\tshape = new Ammo.btCapsuleShape( description.radius, description.height - 2 * description.radius );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'cone':\n\t\t\tcache_key = 'cone_' + description.radius + '_' + description.height;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btConeShape( description.radius, description.height );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'concave':\n\t\t\tvar i, triangle, triangle_mesh = new Ammo.btTriangleMesh;\n\t\t\tif (!description.triangles.length) return false\n\n\t\t\tfor ( i = 0; i < description.triangles.length; i++ ) {\n\t\t\t\ttriangle = description.triangles[i];\n\n\t\t\t\t_vec3_1.setX(triangle[0].x);\n\t\t\t\t_vec3_1.setY(triangle[0].y);\n\t\t\t\t_vec3_1.setZ(triangle[0].z);\n\n\t\t\t\t_vec3_2.setX(triangle[1].x);\n\t\t\t\t_vec3_2.setY(triangle[1].y);\n\t\t\t\t_vec3_2.setZ(triangle[1].z);\n\n\t\t\t\t_vec3_3.setX(triangle[2].x);\n\t\t\t\t_vec3_3.setY(triangle[2].y);\n\t\t\t\t_vec3_3.setZ(triangle[2].z);\n\n\t\t\t\ttriangle_mesh.addTriangle(\n\t\t\t\t\t_vec3_1,\n\t\t\t\t\t_vec3_2,\n\t\t\t\t\t_vec3_3,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tshape = new Ammo.btBvhTriangleMeshShape(\n\t\t\t\ttriangle_mesh,\n\t\t\t\ttrue,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\t_noncached_shapes[description.id] = shape;\n\t\t\tbreak;\n\n\t\tcase 'convex':\n\t\t\tvar i, point, shape = new Ammo.btConvexHullShape;\n\t\t\tfor ( i = 0; i < description.points.length; i++ ) {\n\t\t\t\tpoint = description.points[i];\n\n\t\t\t\t_vec3_1.setX(point.x);\n\t\t\t\t_vec3_1.setY(point.y);\n\t\t\t\t_vec3_1.setZ(point.z);\n\n\t\t\t\tshape.addPoint(_vec3_1);\n\n\t\t\t}\n\t\t\t_noncached_shapes[description.id] = shape;\n\t\t\tbreak;\n\n\t\tcase 'heightfield':\n\n\t\t\tvar ptr = Ammo.allocate(4 * description.xpts * description.ypts, \"float\", Ammo.ALLOC_NORMAL);\n\n\t\t\tfor (var f = 0; f < description.points.length; f++) {\n\t\t\t\tAmmo.setValue(ptr + f,  description.points[f]  , 'float');\n\t\t\t}\n\n\t\t\tshape = new Ammo.btHeightfieldTerrainShape(\n\t\t\t\t\tdescription.xpts,\n\t\t\t\t\tdescription.ypts,\n\t\t\t\t\tptr,\n\t\t\t\t\t1,\n\t\t\t\t\t-description.absMaxHeight,\n\t\t\t\t\tdescription.absMaxHeight,\n\t\t\t\t\t2,\n\t\t\t\t\t0,\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t_vec3_1.setX(description.xsize/(description.xpts - 1));\n\t\t\t_vec3_1.setY(description.ysize/(description.ypts - 1));\n\t\t\t_vec3_1.setZ(1);\n\n\t\t\tshape.setLocalScaling(_vec3_1);\n\t\t\t_noncached_shapes[description.id] = shape;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t// Not recognized\n\t\t\treturn;\n\t\t\tbreak;\n\t}\n\n\treturn shape;\n};\n\npublic_functions.init = function( params ) {\n\timportScripts( params.ammo );\n\n\t_transform = new Ammo.btTransform;\n\t_vec3_1 = new Ammo.btVector3(0,0,0);\n\t_vec3_2 = new Ammo.btVector3(0,0,0);\n\t_vec3_3 = new Ammo.btVector3(0,0,0);\n\t_quat = new Ammo.btQuaternion(0,0,0,0);\n\n\tREPORT_CHUNKSIZE = params.reportsize || 50;\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\t// Transferable messages are supported, take advantage of them with TypedArrays\n\t\tworldreport = new Float32Array(2 + REPORT_CHUNKSIZE * WORLDREPORT_ITEMSIZE); // message id + # of objects to report + chunk size * # of values per object\n\t\tcollisionreport = new Float32Array(2 + REPORT_CHUNKSIZE * COLLISIONREPORT_ITEMSIZE); // message id + # of collisions to report + chunk size * # of values per object\n\t\tvehiclereport = new Float32Array(2 + REPORT_CHUNKSIZE * VEHICLEREPORT_ITEMSIZE); // message id + # of vehicles to report + chunk size * # of values per object\n\t\tconstraintreport = new Float32Array(2 + REPORT_CHUNKSIZE * CONSTRAINTREPORT_ITEMSIZE); // message id + # of constraints to report + chunk size * # of values per object\n\t} else {\n\t\t// Transferable messages are not supported, send data as normal arrays\n\t\tworldreport = [];\n\t\tcollisionreport = [];\n\t\tvehiclereport = [];\n\t\tconstraintreport = [];\n\t}\n\tworldreport[0] = MESSAGE_TYPES.WORLDREPORT;\n\tcollisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;\n\tvehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;\n\tconstraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;\n\n\tvar collisionConfiguration = new Ammo.btDefaultCollisionConfiguration,\n\t\tdispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration ),\n\t\tsolver = new Ammo.btSequentialImpulseConstraintSolver,\n\t\tbroadphase;\n\n\tif ( !params.broadphase ) params.broadphase = { type: 'dynamic' };\n\tswitch ( params.broadphase.type ) {\n\t\tcase 'sweepprune':\n\n\t\t\t_vec3_1.setX(params.broadphase.aabbmin.x);\n\t\t\t_vec3_1.setY(params.broadphase.aabbmin.y);\n\t\t\t_vec3_1.setZ(params.broadphase.aabbmin.z);\n\n\t\t\t_vec3_2.setX(params.broadphase.aabbmax.x);\n\t\t\t_vec3_2.setY(params.broadphase.aabbmax.y);\n\t\t\t_vec3_2.setZ(params.broadphase.aabbmax.z);\n\n\t\t\tbroadphase = new Ammo.btAxisSweep3(\n\t\t\t\t_vec3_1,\n\t\t\t\t_vec3_2\n\t\t\t);\n\n\t\t\tbreak;\n\n\t\tcase 'dynamic':\n\t\tdefault:\n\t\t\tbroadphase = new Ammo.btDbvtBroadphase;\n\t\t\tbreak;\n\t}\n\n\tworld = new Ammo.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );\n\n\tfixedTimeStep = params.fixedTimeStep;\n\trateLimit = params.rateLimit;\n\n\ttransferableMessage({ cmd: 'worldReady' });\n};\n\npublic_functions.registerMaterial = function( description ) {\n\t_materials[ description.id ] = description;\n};\n\npublic_functions.unRegisterMaterial = function( description ) {\n\tdelete _materials[ description.id ];\n};\n\npublic_functions.setFixedTimeStep = function( description ) {\n\tfixedTimeStep = description;\n};\n\npublic_functions.setGravity = function( description ) {\n\t_vec3_1.setX(description.x);\n\t_vec3_1.setY(description.y);\n\t_vec3_1.setZ(description.z);\n\tworld.setGravity(_vec3_1);\n};\n\npublic_functions.addObject = function( description ) {\n\n\tvar i,\n\tlocalInertia, shape, motionState, rbInfo, body;\n\nshape = createShape( description );\nif (!shape) return\n// If there are children then this is a compound shape\nif ( description.children ) {\n\tvar compound_shape = new Ammo.btCompoundShape, _child;\n\tcompound_shape.addChildShape( _transform, shape );\n\n\tfor ( i = 0; i < description.children.length; i++ ) {\n\t\t_child = description.children[i];\n\n\t\tvar trans = new Ammo.btTransform;\n\t\ttrans.setIdentity();\n\n\t\t_vec3_1.setX(_child.position_offset.x);\n\t\t_vec3_1.setY(_child.position_offset.y);\n\t\t_vec3_1.setZ(_child.position_offset.z);\n\t\ttrans.setOrigin(_vec3_1);\n\n\t\t_quat.setX(_child.rotation.x);\n\t\t_quat.setY(_child.rotation.y);\n\t\t_quat.setZ(_child.rotation.z);\n\t\t_quat.setW(_child.rotation.w);\n\t\ttrans.setRotation(_quat);\n\n\t\tshape = createShape( description.children[i] );\n\t\tcompound_shape.addChildShape( trans, shape );\n\t\tAmmo.destroy(trans);\n\t}\n\n\tshape = compound_shape;\n    _compound_shapes[ description.id ] = shape;\n\t}\n\t_vec3_1.setX(0);\n\t_vec3_1.setY(0);\n\t_vec3_1.setZ(0);\n\tshape.calculateLocalInertia( description.mass, _vec3_1 );\n\n\t_transform.setIdentity();\n\n\t_vec3_2.setX(description.position.x);\n\t_vec3_2.setY(description.position.y);\n\t_vec3_2.setZ(description.position.z);\n\t_transform.setOrigin(_vec3_2);\n\n\t_quat.setX(description.rotation.x);\n\t_quat.setY(description.rotation.y);\n\t_quat.setZ(description.rotation.z);\n\t_quat.setW(description.rotation.w);\n\t_transform.setRotation(_quat);\n\n\tmotionState = new Ammo.btDefaultMotionState( _transform ); // #TODO: btDefaultMotionState supports center of mass offset as second argument - implement\n\trbInfo = new Ammo.btRigidBodyConstructionInfo( description.mass, motionState, shape, _vec3_1 );\n\n\tif ( description.materialId !== undefined ) {\n\t\trbInfo.set_m_friction( _materials[ description.materialId ].friction );\n\t\trbInfo.set_m_restitution( _materials[ description.materialId ].restitution );\n\t}\n\n\tbody = new Ammo.btRigidBody( rbInfo );\n\tAmmo.destroy(rbInfo);\n\n\tif ( typeof description.collision_flags !== 'undefined' ) {\n\t\tbody.setCollisionFlags( description.collision_flags );\n\t}\n\n\tworld.addRigidBody( body );\n\n\tbody.id = description.id;\n\t_objects[ body.id ] = body;\n\t_motion_states[ body.id ] = motionState;\n\n\tvar ptr = body.a != undefined ? body.a : body.ptr;\n\t_objects_ammo[ptr] = body.id;\n\t_num_objects++;\n\n\ttransferableMessage({ cmd: 'objectReady', params: body.id });\n};\n\npublic_functions.addVehicle = function( description ) {\n\tvar vehicle_tuning = new Ammo.btVehicleTuning(),\n\t\tvehicle;\n\n\tvehicle_tuning.set_m_suspensionStiffness( description.suspension_stiffness );\n\tvehicle_tuning.set_m_suspensionCompression( description.suspension_compression );\n\tvehicle_tuning.set_m_suspensionDamping( description.suspension_damping );\n\tvehicle_tuning.set_m_maxSuspensionTravelCm( description.max_suspension_travel );\n\tvehicle_tuning.set_m_maxSuspensionForce( description.max_suspension_force );\n\n\tvehicle = new Ammo.btRaycastVehicle( vehicle_tuning, _objects[ description.rigidBody ], new Ammo.btDefaultVehicleRaycaster( world ) );\n\tvehicle.tuning = vehicle_tuning;\n\n\t_objects[ description.rigidBody ].setActivationState( 4 );\n\tvehicle.setCoordinateSystem( 0, 1, 2 );\n\n\tworld.addVehicle( vehicle );\n\t_vehicles[ description.id ] = vehicle;\n};\npublic_functions.removeVehicle = function( description ) {\n\tdelete _vehicles[ description.id ];\n};\n\npublic_functions.addWheel = function( description ) {\n\tif ( _vehicles[description.id] !== undefined ) {\n\t\tvar tuning = _vehicles[description.id].tuning;\n\t\tif ( description.tuning !== undefined ) {\n\t\t\ttuning = new Ammo.btVehicleTuning();\n\t\t\ttuning.set_m_suspensionStiffness( description.tuning.suspension_stiffness );\n\t\t\ttuning.set_m_suspensionCompression( description.tuning.suspension_compression );\n\t\t\ttuning.set_m_suspensionDamping( description.tuning.suspension_damping );\n\t\t\ttuning.set_m_maxSuspensionTravelCm( description.tuning.max_suspension_travel );\n\t\t\ttuning.set_m_maxSuspensionForce( description.tuning.max_suspension_force );\n\t\t}\n\n\t\t_vec3_1.setX(description.connection_point.x);\n\t\t_vec3_1.setY(description.connection_point.y);\n\t\t_vec3_1.setZ(description.connection_point.z);\n\n\t\t_vec3_2.setX(description.wheel_direction.x);\n\t\t_vec3_2.setY(description.wheel_direction.y);\n\t\t_vec3_2.setZ(description.wheel_direction.z);\n\n\t\t_vec3_3.setX(description.wheel_axle.x);\n\t\t_vec3_3.setY(description.wheel_axle.y);\n\t\t_vec3_3.setZ(description.wheel_axle.z);\n\n\t\t_vehicles[description.id].addWheel(\n\t\t\t_vec3_1,\n\t\t\t_vec3_2,\n\t\t\t_vec3_3,\n\t\t\tdescription.suspension_rest_length,\n\t\t\tdescription.wheel_radius,\n\t\t\ttuning,\n\t\t\tdescription.is_front_wheel\n\t\t);\n\t}\n\n\t_num_wheels++;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tvehiclereport = new Float32Array(1 + _num_wheels * VEHICLEREPORT_ITEMSIZE); // message id & ( # of objects to report * # of values per object )\n\t\tvehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;\n\t} else {\n\t\tvehiclereport = [ MESSAGE_TYPES.VEHICLEREPORT ];\n\t}\n};\n\npublic_functions.setSteering = function( details ) {\n\tif ( _vehicles[details.id] !== undefined ) {\n\t\t_vehicles[details.id].setSteeringValue( details.steering, details.wheel );\n\t}\n};\npublic_functions.setBrake = function( details ) {\n\tif ( _vehicles[details.id] !== undefined ) {\n\t\t_vehicles[details.id].setBrake( details.brake, details.wheel );\n\t}\n};\npublic_functions.applyEngineForce = function( details ) {\n\tif ( _vehicles[details.id] !== undefined ) {\n\t\t_vehicles[details.id].applyEngineForce( details.force, details.wheel );\n\t}\n};\n\npublic_functions.removeObject = function( details ) {\n\tworld.removeRigidBody( _objects[details.id] );\n\tAmmo.destroy(_objects[details.id]);\n\tAmmo.destroy(_motion_states[details.id]);\n    if (_compound_shapes[details.id]) Ammo.destroy(_compound_shapes[details.id]);\n\tif (_noncached_shapes[details.id]) Ammo.destroy(_noncached_shapes[details.id]);\n\tvar ptr = _objects[details.id].a != undefined ? _objects[details.id].a : _objects[details.id].ptr;\n\tdelete _objects_ammo[ptr];\n\tdelete _objects[details.id];\n\tdelete _motion_states[details.id];\n    if (_compound_shapes[details.id]) delete _compound_shapes[details.id];\n\tif (_noncached_shapes[details.id]) delete _noncached_shapes[details.id];\n\t_num_objects--;\n};\n\npublic_functions.updateTransform = function( details ) {\n\t_object = _objects[details.id];\n\t_object.getMotionState().getWorldTransform( _transform );\n\n\tif ( details.pos ) {\n\t\t_vec3_1.setX(details.pos.x);\n\t\t_vec3_1.setY(details.pos.y);\n\t\t_vec3_1.setZ(details.pos.z);\n\t\t_transform.setOrigin(_vec3_1);\n\t}\n\n\tif ( details.quat ) {\n\t\t_quat.setX(details.quat.x);\n\t\t_quat.setY(details.quat.y);\n\t\t_quat.setZ(details.quat.z);\n\t\t_quat.setW(details.quat.w);\n\t\t_transform.setRotation(_quat);\n\t}\n\n\t_object.setWorldTransform( _transform );\n\t_object.activate();\n};\n\npublic_functions.updateMass = function( details ) {\n\t// #TODO: changing a static object into dynamic is buggy\n\t_object = _objects[details.id];\n\n\t// Per http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&f=9&t=3663#p13816\n\tworld.removeRigidBody( _object );\n\n\t_vec3_1.setX(0);\n\t_vec3_1.setY(0);\n\t_vec3_1.setZ(0);\n\n\t_object.setMassProps( details.mass, _vec3_1 );\n\tworld.addRigidBody( _object );\n\t_object.activate();\n};\n\npublic_functions.applyCentralImpulse = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].applyCentralImpulse(_vec3_1);\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyImpulse = function ( details ) {\n\n\t_vec3_1.setX(details.impulse_x);\n\t_vec3_1.setY(details.impulse_y);\n\t_vec3_1.setZ(details.impulse_z);\n\n\t_vec3_2.setX(details.x);\n\t_vec3_2.setY(details.y);\n\t_vec3_2.setZ(details.z);\n\n\t_objects[details.id].applyImpulse(\n\t\t_vec3_1,\n\t\t_vec3_2\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyTorque = function ( details ) {\n\n\t_vec3_1.setX(details.torque_x);\n\t_vec3_1.setY(details.torque_y);\n\t_vec3_1.setZ(details.torque_z);\n\n\t_objects[details.id].applyTorque(\n\t\t_vec3_1\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyCentralForce = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].applyCentralForce(_vec3_1);\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyForce = function ( details ) {\n\n\t_vec3_1.setX(details.force_x);\n\t_vec3_1.setY(details.force_y);\n\t_vec3_1.setZ(details.force_z);\n\n\t_vec3_2.setX(details.x);\n\t_vec3_2.setY(details.y);\n\t_vec3_2.setZ(details.z);\n\n\t_objects[details.id].applyForce(\n\t\t_vec3_1,\n\t\t_vec3_2\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.onSimulationResume = function( params ) {\n\tlast_simulation_time = Date.now();\n};\n\npublic_functions.setAngularVelocity = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].setAngularVelocity(\n\t\t_vec3_1\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.setLinearVelocity = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].setLinearVelocity(\n\t\t_vec3_1\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.setAngularFactor = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].setAngularFactor(\n\t\t\t_vec3_1\n\t);\n};\n\npublic_functions.setLinearFactor = function ( details ) {\n\n\t_vec3_1.setX(details.x);\n\t_vec3_1.setY(details.y);\n\t_vec3_1.setZ(details.z);\n\n\t_objects[details.id].setLinearFactor(\n\t\t_vec3_1\n\t);\n};\n\npublic_functions.setDamping = function ( details ) {\n\t_objects[details.id].setDamping( details.linear, details.angular );\n};\n\npublic_functions.setCcdMotionThreshold = function ( details ) {\n\t_objects[details.id].setCcdMotionThreshold( details.threshold );\n};\n\npublic_functions.setCcdSweptSphereRadius = function ( details ) {\n\t_objects[details.id].setCcdSweptSphereRadius( details.radius );\n};\n\npublic_functions.addConstraint = function ( details ) {\n\tvar constraint;\n\n\tswitch ( details.type ) {\n\n\t\tcase 'point':\n\t\t\tif ( details.objectb === undefined ) {\n\n\t\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\t\tconstraint = new Ammo.btPoint2PointConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_vec3_1\n\t\t\t\t);\n\t\t\t} else {\n\n\t\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\t\t_vec3_2.setX(details.positionb.x);\n\t\t\t\t_vec3_2.setY(details.positionb.y);\n\t\t\t\t_vec3_2.setZ(details.positionb.z);\n\n\t\t\t\tconstraint = new Ammo.btPoint2PointConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\t_vec3_1,\n\t\t\t\t\t_vec3_2\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'hinge':\n\t\t\tif ( details.objectb === undefined ) {\n\n\t\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\t\t_vec3_2.setX(details.axis.x);\n\t\t\t\t_vec3_2.setY(details.axis.y);\n\t\t\t\t_vec3_2.setZ(details.axis.z);\n\n\t\t\t\tconstraint = new Ammo.btHingeConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_vec3_1,\n\t\t\t\t\t_vec3_2\n\t\t\t\t);\n\t\t\t} else {\n\n\t\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\t\t_vec3_2.setX(details.positionb.x);\n\t\t\t\t_vec3_2.setY(details.positionb.y);\n\t\t\t\t_vec3_2.setZ(details.positionb.z);\n\n\t\t\t\t_vec3_3.setX(details.axis.x);\n\t\t\t\t_vec3_3.setY(details.axis.y);\n\t\t\t\t_vec3_3.setZ(details.axis.z);\n\n\t\t\t\tconstraint = new Ammo.btHingeConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\t_vec3_1,\n\t\t\t\t\t_vec3_2,\n\t\t\t\t\t_vec3_3,\n\t\t\t\t\t_vec3_3\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'slider':\n\t\t\tvar transforma, transformb, rotation;\n\n\t\t\ttransforma = new Ammo.btTransform();\n\n\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\ttransforma.setOrigin(_vec3_1);\n\n\t\t\tvar rotation = transforma.getRotation();\n\t\t\trotation.setEuler( details.axis.x, details.axis.y, details.axis.z );\n\t\t\ttransforma.setRotation( rotation );\n\n\t\t\tif ( details.objectb ) {\n\t\t\t\ttransformb = new Ammo.btTransform();\n\n\t\t\t\t_vec3_2.setX(details.positionb.x);\n\t\t\t\t_vec3_2.setY(details.positionb.y);\n\t\t\t\t_vec3_2.setZ(details.positionb.z);\n\n\t\t\t\ttransformb.setOrigin(_vec3_2);\n\n\t\t\t\trotation = transformb.getRotation();\n\t\t\t\trotation.setEuler( details.axis.x, details.axis.y, details.axis.z );\n\t\t\t\ttransformb.setRotation( rotation );\n\n\t\t\t\tconstraint = new Ammo.btSliderConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttransformb,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btSliderConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tAmmo.destroy(transforma);\n\t\t\tif (transformb != undefined) {\n\t\t\t\tAmmo.destroy(transformb);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'conetwist':\n\t\t\tvar transforma, transformb;\n\n\t\t\ttransforma = new Ammo.btTransform();\n\t\t\ttransforma.setIdentity();\n\n\t\t\ttransformb = new Ammo.btTransform();\n\t\t\ttransformb.setIdentity();\n\n\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\t_vec3_2.setX(details.positionb.x);\n\t\t\t_vec3_2.setY(details.positionb.y);\n\t\t\t_vec3_2.setZ(details.positionb.z);\n\n\t\t\ttransforma.setOrigin(_vec3_1);\n\t\t\ttransformb.setOrigin(_vec3_2);\n\n\t\t\tvar rotation = transforma.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisa.z, -details.axisa.y, -details.axisa.x );\n\t\t\ttransforma.setRotation( rotation );\n\n\t\t\trotation = transformb.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisb.z, -details.axisb.y, -details.axisb.x );\n\t\t\ttransformb.setRotation( rotation );\n\n\t\t\tconstraint = new Ammo.btConeTwistConstraint(\n\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t_objects[ details.objectb ],\n\t\t\t\ttransforma,\n\t\t\t\ttransformb\n\t\t\t);\n\n\t\t\tconstraint.setLimit( Math.PI, 0, Math.PI );\n\n\t\t\tAmmo.destroy(transforma);\n\t\t\tAmmo.destroy(transformb);\n\n\t\t\tbreak;\n\n\t\tcase 'dof':\n\t\t\tvar transforma, transformb, rotation;\n\n\t\t\ttransforma = new Ammo.btTransform();\n\t\t\ttransforma.setIdentity();\n\n\t\t\t_vec3_1.setX(details.positiona.x);\n\t\t\t_vec3_1.setY(details.positiona.y);\n\t\t\t_vec3_1.setZ(details.positiona.z);\n\n\t\t\ttransforma.setOrigin(_vec3_1 );\n\n\t\t\trotation = transforma.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisa.z, -details.axisa.y, -details.axisa.x );\n\t\t\ttransforma.setRotation( rotation );\n\n\t\t\tif ( details.objectb ) {\n\t\t\t\ttransformb = new Ammo.btTransform();\n\t\t\t\ttransformb.setIdentity();\n\n\t\t\t\t_vec3_2.setX(details.positionb.x);\n\t\t\t\t_vec3_2.setY(details.positionb.y);\n\t\t\t\t_vec3_2.setZ(details.positionb.z);\n\n\t\t\t\ttransformb.setOrigin(_vec3_2);\n\n\t\t\t\trotation = transformb.getRotation();\n\t\t\t\trotation.setEulerZYX( -details.axisb.z, -details.axisb.y, -details.axisb.x );\n\t\t\t\ttransformb.setRotation( rotation );\n\n\t\t\t\tconstraint = new Ammo.btGeneric6DofConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttransformb\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btGeneric6DofConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\ttransforma\n\t\t\t\t);\n\t\t\t}\n\t\t\tAmmo.destroy(transforma);\n\t\t\tif (transformb != undefined) {\n\t\t\t\tAmmo.destroy(transformb);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\treturn;\n\n\t};\n\n\tworld.addConstraint( constraint );\n\n\tconstraint.enableFeedback();\n\t_constraints[ details.id ] = constraint;\n\t_num_constraints++;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tconstraintreport = new Float32Array(1 + _num_constraints * CONSTRAINTREPORT_ITEMSIZE); // message id & ( # of objects to report * # of values per object )\n\t\tconstraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;\n\t} else {\n\t\tconstraintreport = [ MESSAGE_TYPES.CONSTRAINTREPORT ];\n\t}\n};\n\npublic_functions.removeConstraint = function( details ) {\n\tvar constraint = _constraints[ details.id ];\n\tif ( constraint !== undefined ) {\n\t\tworld.removeConstraint( constraint );\n\t\tdelete _constraints[ details.id ];\n\t\t_num_constraints--;\n\t}\n};\n\npublic_functions.constraint_setBreakingImpulseThreshold = function( details ) {\n\tvar constraint = _constraints[ details.id ];\n\tif ( constraint !== undefind ) {\n\t\tconstraint.setBreakingImpulseThreshold( details.threshold );\n\t}\n};\n\npublic_functions.simulate = function simulate( params ) {\n\tif ( world ) {\n\t\tparams = params || {};\n\n\t\tif ( !params.timeStep ) {\n\t\t\tif ( last_simulation_time ) {\n\t\t\t\tparams.timeStep = 0;\n\t\t\t\twhile ( params.timeStep + last_simulation_duration <= fixedTimeStep ) {\n\t\t\t\t\tparams.timeStep = ( Date.now() - last_simulation_time ) / 1000; // time since last simulation\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparams.timeStep = fixedTimeStep; // handle first frame\n\t\t\t}\n\t\t} else {\n\t\t\tif ( params.timeStep < fixedTimeStep ) {\n\t\t\t\tparams.timeStep = fixedTimeStep;\n\t\t\t}\n\t\t}\n\n\t\tparams.maxSubSteps = params.maxSubSteps || Math.ceil( params.timeStep / fixedTimeStep ); // If maxSubSteps is not defined, keep the simulation fully up to date\n\n\t\tlast_simulation_duration = Date.now();\n\t\tworld.stepSimulation( params.timeStep, params.maxSubSteps, fixedTimeStep );\n\n\t\treportVehicles();\n\t\treportCollisions();\n\t\treportConstraints();\n\t\treportWorld();\n\n\t\tlast_simulation_duration = ( Date.now() - last_simulation_duration ) / 1000;\n\t\tlast_simulation_time = Date.now();\n\t}\n};\n\n\n// Constraint functions\npublic_functions.hinge_setLimits = function( params ) {\n\t_constraints[ params.constraint ].setLimit( params.low, params.high, 0, params.bias_factor, params.relaxation_factor );\n};\npublic_functions.hinge_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableAngularMotor( true, params.velocity, params.acceleration );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.hinge_disableMotor = function( params ) {\n\t_constraints[ params.constraint ].enableMotor( false );\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\npublic_functions.slider_setLimits = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setLowerLinLimit( params.lin_lower || 0 );\n\tconstraint.setUpperLinLimit( params.lin_upper || 0 );\n\n\tconstraint.setLowerAngLimit( params.ang_lower || 0 );\n\tconstraint.setUpperAngLimit( params.ang_upper || 0 );\n};\npublic_functions.slider_setRestitution = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setSoftnessLimLin( params.linear || 0 );\n\tconstraint.setSoftnessLimAng( params.angular || 0 );\n};\npublic_functions.slider_enableLinearMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setTargetLinMotorVelocity( params.velocity );\n\tconstraint.setMaxLinMotorForce( params.acceleration );\n\tconstraint.setPoweredLinMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_disableLinearMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setPoweredLinMotor( false );\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setTargetAngMotorVelocity( params.velocity );\n\tconstraint.setMaxAngMotorForce( params.acceleration );\n\tconstraint.setPoweredAngMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_disableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setPoweredAngMotor( false );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\npublic_functions.conetwist_setLimit = function( params ) {\n\t_constraints[ params.constraint ].setLimit( params.z, params.y, params.x ); // ZYX order\n};\npublic_functions.conetwist_enableMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_setMaxMotorImpulse = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setMaxMotorImpulse( params.max_impulse );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_setMotorTarget = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\t_quat.setX(params.x);\n\t_quat.setY(params.y);\n\t_quat.setZ(params.z);\n\t_quat.setW(params.w);\n\n\tconstraint.setMotorTarget(_quat);\n\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_disableMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableMotor( false );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\n\npublic_functions.dof_setLinearLowerLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\t_vec3_1.setX(params.x);\n\t_vec3_1.setY(params.y);\n\t_vec3_1.setZ(params.z);\n\n\tconstraint.setLinearLowerLimit(_vec3_1);\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setLinearUpperLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\t_vec3_1.setX(params.x);\n\t_vec3_1.setY(params.y);\n\t_vec3_1.setZ(params.z);\n\n\tconstraint.setLinearUpperLimit(_vec3_1);\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setAngularLowerLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\t_vec3_1.setX(params.x);\n\t_vec3_1.setY(params.y);\n\t_vec3_1.setZ(params.z);\n\n\tconstraint.setAngularLowerLimit(_vec3_1);\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setAngularUpperLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\t_vec3_1.setX(params.x);\n\t_vec3_1.setY(params.y);\n\t_vec3_1.setZ(params.z);\n\n\tconstraint.setAngularUpperLimit(_vec3_1);\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\tmotor.set_m_enableMotor( true );\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_configureAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\n\tmotor.set_m_loLimit( params.low_angle );\n\tmotor.set_m_hiLimit( params.high_angle );\n\tmotor.set_m_targetVelocity( params.velocity );\n\tmotor.set_m_maxMotorForce( params.max_force );\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_disableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\tmotor.set_m_enableMotor( false );\n\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\nreportWorld = function() {\n\tvar index, object,\n\t\ttransform, origin, rotation,\n\t\toffset = 0,\n\t\ti = 0;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tif ( worldreport.length < 2 + _num_objects * WORLDREPORT_ITEMSIZE ) {\n\t\t\tworldreport = new Float32Array(\n\t\t\t\t2 + // message id & # objects in report\n\t\t\t\t( Math.ceil( _num_objects / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * WORLDREPORT_ITEMSIZE // # of values needed * item size\n\t\t\t);\n\t\t\tworldreport[0] = MESSAGE_TYPES.WORLDREPORT;\n\t\t}\n\t}\n\n\tworldreport[1] = _num_objects; // record how many objects we're reporting on\n\n\t//for ( i = 0; i < worldreport[1]; i++ ) {\n\tfor ( index in _objects ) {\n\t\tif ( _objects.hasOwnProperty( index ) ) {\n\t\t\tobject = _objects[index];\n\n\t\t\t// #TODO: we can't use center of mass transform when center of mass can change,\n\t\t\t//        but getMotionState().getWorldTransform() screws up on objects that have been moved\n\t\t\t//object.getMotionState().getWorldTransform( transform );\n\t\t\ttransform = object.getCenterOfMassTransform();\n\n\t\t\torigin = transform.getOrigin();\n\t\t\trotation = transform.getRotation();\n\n\t\t\t// add values to report\n\t\t\toffset = 2 + (i++) * WORLDREPORT_ITEMSIZE;\n\n\t\t\tworldreport[ offset ] = object.id;\n\n\t\t\tworldreport[ offset + 1 ] = origin.x();\n\t\t\tworldreport[ offset + 2 ] = origin.y();\n\t\t\tworldreport[ offset + 3 ] = origin.z();\n\n\t\t\tworldreport[ offset + 4 ] = rotation.x();\n\t\t\tworldreport[ offset + 5 ] = rotation.y();\n\t\t\tworldreport[ offset + 6 ] = rotation.z();\n\t\t\tworldreport[ offset + 7 ] = rotation.w();\n\n\t\t\t_vector = object.getLinearVelocity();\n\t\t\tworldreport[ offset + 8 ] = _vector.x();\n\t\t\tworldreport[ offset + 9 ] = _vector.y();\n\t\t\tworldreport[ offset + 10 ] = _vector.z();\n\n\t\t\t_vector = object.getAngularVelocity();\n\t\t\tworldreport[ offset + 11 ] = _vector.x();\n\t\t\tworldreport[ offset + 12 ] = _vector.y();\n\t\t\tworldreport[ offset + 13 ] = _vector.z();\n\t\t}\n\t}\n\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\ttransferableMessage( worldreport.buffer, [worldreport.buffer] );\n\t} else {\n\t\ttransferableMessage( worldreport );\n\t}\n\n};\n\nreportCollisions = function() {\n\tvar i, offset,\n\t\tdp = world.getDispatcher(),\n\t\tnum = dp.getNumManifolds(),\n\t\tmanifold, num_contacts, j, pt,\n\t\t_collided = false;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tif ( collisionreport.length < 2 + num * COLLISIONREPORT_ITEMSIZE ) {\n\t\t\tcollisionreport = new Float32Array(\n\t\t\t\t2 + // message id & # objects in report\n\t\t\t\t( Math.ceil( _num_objects / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * COLLISIONREPORT_ITEMSIZE // # of values needed * item size\n\t\t\t);\n\t\t\tcollisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;\n\t\t}\n\t}\n\n\tcollisionreport[1] = 0; // how many collisions we're reporting on\n\n\tfor ( i = 0; i < num; i++ ) {\n\t\tmanifold = dp.getManifoldByIndexInternal( i );\n\n\t\tnum_contacts = manifold.getNumContacts();\n\t\tif ( num_contacts === 0 ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor ( j = 0; j < num_contacts; j++ ) {\n\t\t\tpt = manifold.getContactPoint( j );\n\t\t\t//if ( pt.getDistance() < 0 ) {\n\t\t\t\toffset = 2 + (collisionreport[1]++) * COLLISIONREPORT_ITEMSIZE;\n\t\t\t\tcollisionreport[ offset ] = _objects_ammo[ manifold.getBody0() ];\n\t\t\t\tcollisionreport[ offset + 1 ] = _objects_ammo[ manifold.getBody1() ];\n\n\t\t\t\t_vector = pt.get_m_normalWorldOnB();\n\t\t\t\tcollisionreport[ offset + 2 ] = _vector.x();\n\t\t\t\tcollisionreport[ offset + 3 ] = _vector.y();\n\t\t\t\tcollisionreport[ offset + 4 ] = _vector.z();\n\t\t\t\tbreak;\n\t\t\t//}\n\n\t\t\t\ttransferableMessage( _objects_ammo );\n\n\t\t}\n\t}\n\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\ttransferableMessage( collisionreport.buffer, [collisionreport.buffer] );\n\t} else {\n\t\ttransferableMessage( collisionreport );\n\t}\n};\n\nreportVehicles = function() {\n\tvar index, vehicle,\n\t\ttransform, origin, rotation,\n\t\toffset = 0,\n\t\ti = 0, j = 0;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tif ( vehiclereport.length < 2 + _num_wheels * VEHICLEREPORT_ITEMSIZE ) {\n\t\t\tvehiclereport = new Float32Array(\n\t\t\t\t2 + // message id & # objects in report\n\t\t\t\t( Math.ceil( _num_wheels / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * VEHICLEREPORT_ITEMSIZE // # of values needed * item size\n\t\t\t);\n\t\t\tvehiclereport[0] = MESSAGE_TYPES.VEHICLEREPORT;\n\t\t}\n\t}\n\n\tfor ( index in _vehicles ) {\n\t\tif ( _vehicles.hasOwnProperty( index ) ) {\n\t\t\tvehicle = _vehicles[index];\n\n\t\t\tfor ( j = 0; j < vehicle.getNumWheels(); j++ ) {\n\n\t\t\t\t//vehicle.updateWheelTransform( j, true );\n\n\t\t\t\t//transform = vehicle.getWheelTransformWS( j );\n\t\t\t\ttransform = vehicle.getWheelInfo( j ).get_m_worldTransform();\n\n\t\t\t\torigin = transform.getOrigin();\n\t\t\t\trotation = transform.getRotation();\n\n\t\t\t\t// add values to report\n\t\t\t\toffset = 1 + (i++) * VEHICLEREPORT_ITEMSIZE;\n\n\t\t\t\tvehiclereport[ offset ] = index;\n\t\t\t\tvehiclereport[ offset + 1 ] = j;\n\n\t\t\t\tvehiclereport[ offset + 2 ] = origin.x();\n\t\t\t\tvehiclereport[ offset + 3 ] = origin.y();\n\t\t\t\tvehiclereport[ offset + 4 ] = origin.z();\n\n\t\t\t\tvehiclereport[ offset + 5 ] = rotation.x();\n\t\t\t\tvehiclereport[ offset + 6 ] = rotation.y();\n\t\t\t\tvehiclereport[ offset + 7 ] = rotation.z();\n\t\t\t\tvehiclereport[ offset + 8 ] = rotation.w();\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif ( j !== 0 ) {\n\t\tif ( SUPPORT_TRANSFERABLE ) {\n\t\t\ttransferableMessage( vehiclereport.buffer, [vehiclereport.buffer] );\n\t\t} else {\n\t\t\ttransferableMessage( vehiclereport );\n\t\t}\n\t}\n};\n\nreportConstraints = function() {\n\tvar index, constraint,\n\t\toffset_body,\n\t\ttransform, origin,\n\t\toffset = 0,\n\t\ti = 0;\n\n\tif ( SUPPORT_TRANSFERABLE ) {\n\t\tif ( constraintreport.length < 2 + _num_constraints * CONSTRAINTREPORT_ITEMSIZE ) {\n\t\t\tconstraintreport = new Float32Array(\n\t\t\t\t2 + // message id & # objects in report\n\t\t\t\t( Math.ceil( _num_constraints / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * CONSTRAINTREPORT_ITEMSIZE // # of values needed * item size\n\t\t\t);\n\t\t\tconstraintreport[0] = MESSAGE_TYPES.CONSTRAINTREPORT;\n\t\t}\n\t}\n\n\tfor ( index in _constraints ) {\n\t\tif ( _constraints.hasOwnProperty( index ) ) {\n\t\t\tconstraint = _constraints[index];\n\t\t\toffset_body = constraint.getRigidBodyA();\n\t\t\ttransform = constraint.getFrameOffsetA();\n\t\t\torigin = transform.getOrigin();\n\n\t\t\t// add values to report\n\t\t\toffset = 1 + (i++) * CONSTRAINTREPORT_ITEMSIZE;\n\n\t\t\tconstraintreport[ offset ] = index;\n\t\t\tconstraintreport[ offset + 1 ] = offset_body.id;\n\t\t\tconstraintreport[ offset + 2 ] = origin.getX();\n\t\t\tconstraintreport[ offset + 3 ] = origin.getY();\n\t\t\tconstraintreport[ offset + 4 ] = origin.getZ();\n\t\t\tconstraintreport[ offset + 5 ] = constraint.getAppliedImpulse();\n\t\t}\n\t}\n\n\n\tif ( i !== 0 ) {\n\t\tif ( SUPPORT_TRANSFERABLE ) {\n\t\t\ttransferableMessage( constraintreport.buffer, [constraintreport.buffer] );\n\t\t} else {\n\t\t\ttransferableMessage( constraintreport );\n\t\t}\n\t}\n\n};\n\nself.onmessage = function( event ) {\n\n\tif ( event.data instanceof Float32Array ) {\n\t\t// transferable object\n\n\t\tswitch ( event.data[0] ) {\n\t\t\tcase MESSAGE_TYPES.WORLDREPORT:\n\t\t\t\tworldreport = new Float32Array( event.data );\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPES.COLLISIONREPORT:\n\t\t\t\tcollisionreport = new Float32Array( event.data );\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPES.VEHICLEREPORT:\n\t\t\t\tvehiclereport = new Float32Array( event.data );\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPES.CONSTRAINTREPORT:\n\t\t\t\tconstraintreport = new Float32Array( event.data );\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn;\n\t}\n\n\tif ( event.data.cmd && public_functions[event.data.cmd] ) {\n\t\t//if ( event.data.params.id !== undefined && _objects[event.data.params.id] === undefined && event.data.cmd !== 'addObject' && event.data.cmd !== 'registerMaterial' ) return;\n\t\tpublic_functions[event.data.cmd]( event.data.params );\n\t}\n\n};\n"]}